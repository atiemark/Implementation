#include <iostream>

#define SDL_MAIN_HANDLED
#include <SDL.h>

#include <Eigen/Dense>
#include <Eigen/Eigenvalues>
#include <vector>
#include <math.h>
#include <chrono>
#include <ctime>
#include <thread> 
#include <complex>
#include <cmath>

#pragma comment(lib, "SDL2.lib")


using namespace std;
using namespace Eigen;

struct MVertex {
	float x;
	float y;
	float z;
};

SDL_AudioDeviceID audio_device;

int numMasses = 10;
int sliderMasses = numMasses;
float massWeight = 1;
float springStiffness = 60000;
float dampingCoeff = 1;

vector<Vector2f> massPositionsString;
MatrixXf modeShapesString;
VectorXf modeFrequenciesString;
VectorXf modeDampingTermsString;
VectorXf modeGainsString;


chrono::time_point<chrono::high_resolution_clock> start, now;

const Uint32 sampleRate = 48000;
Uint32 floatStreamLength = 1024;
int audioVolume = 1;

float audioBuffer[sampleRate * 2];
int bufferWriteIndex = 0;
int bufferReadIndex = 0;

int writtenSamples = 0;
int readSamples = 0;

bool close = false;


float curSample = 0;
float curSampleC = 0;
int mSize = massPositionsString.size();
int mfSize = modeFrequenciesString.size();
float* yPositions = new float[mSize];
float t = 0;


float tIncr = 1.0f / sampleRate;
float* modeGainsTimesModeShapes;
complex<float>* wpiExp;
complex<float>* wmiExp;


float* modeDampingTermsExp = new float[mfSize];
float* damping = new float[mfSize];
float* modeFrequenciesArr = new float[mfSize];




void initMassesString() {
	massPositionsString.clear();
	float spacing = 2.0f / (float)(numMasses + 1);
	massPositionsString.reserve(numMasses);

	for (int i = 0; i < numMasses; i++) {
		massPositionsString.push_back(Vector2f(-1.f + (i + 1) * spacing, 0));
	}
}

float getStiffnessCoeff2d(int i) {
	return springStiffness;
}


VectorXf getMasssDisplacementVectorString() {
	VectorXf mP(massPositionsString.size());
	for (int i = 0; i < massPositionsString.size(); i++) {
		mP(i) = massPositionsString[i](1);
	}
	return mP;
}


void initModesString() {

	//construct Stiffness Matrix

	MatrixXf K(numMasses, numMasses);
	K = MatrixXf::Zero(numMasses, numMasses);
	MatrixXf I = MatrixXf::Identity(numMasses, numMasses);

	for (int i = 0; i < numMasses; i++) {
		if (i > 0) {
			K(i, i - 1) = -getStiffnessCoeff2d(i - 1);
		}

		K(i, i) = getStiffnessCoeff2d(i) + getStiffnessCoeff2d(i + 1);

		if (i < numMasses - 1) {
			K(i, i + 1) = -getStiffnessCoeff2d(i + 1);
		}

	}

	GeneralizedSelfAdjointEigenSolver<MatrixXf> es(K, I);

	modeShapesString = es.eigenvectors();
	modeFrequenciesString = es.eigenvalues();
	modeDampingTermsString = es.eigenvalues();

	for (int i = 0; i < modeFrequenciesString.size(); i++) {
		modeFrequenciesString(i) = sqrt(abs(4 * modeFrequenciesString(i) - pow(modeFrequenciesString(i), 2)) / 2.0f);
		modeDampingTermsString(i) = -(dampingCoeff / 1000.0f * es.eigenvalues()(i)) / 2.0;
	}


	if (numMasses < 4) {
		cout << "K = " << endl << K << endl;
		cout << "The eigenvalues are:" << endl << modeFrequenciesString << endl;
		cout << "The matrix of eigenvectors, V, is:" << endl << modeShapesString << endl << endl;
	}


}


void audioStringSimCos() {

	while (true) {
		curSample = 0;

		for (int i = 0; i < mSize; i++) {

			damping[i] = damping[i] * modeDampingTermsExp[i];
			float cosT = 2 * damping[i]  * cos(t * modeFrequenciesArr[i]);

			for (int m = 0; m < mfSize; m++) {
				curSample += modeGainsTimesModeShapes[i * mSize + m]  * cosT ;

			}
		}


		t += tIncr;
		//audioBuffer[bufferWriteIndex /*% (sampleRate * 100)*/] = curSample;
		bufferWriteIndex++;
		//writtenSamples++;

	}

}




int main(int argc, char** argv) {

	numMasses = 5;
	int initialStringModeShape = 0;

	initMassesString();
	initModesString();

	for (int i = 0; i < massPositionsString.size(); i++) {
		massPositionsString[i](1) = modeShapesString(i, initialStringModeShape);
	}
	
	modeGainsString = modeShapesString.inverse() * getMasssDisplacementVectorString();

	mSize = massPositionsString.size();
	mfSize = modeFrequenciesString.size();
	modeGainsTimesModeShapes = new float[mSize * mfSize];

	cout << "modeGainsTimesModeShapes" << endl;
	for (int i = 0; i < mSize; ++i) {
		for (int m = 0; m < mfSize; m++) {
			modeGainsTimesModeShapes[i * mSize + m] = (modeGainsString(m) * modeShapesString(i, m)) / 2;
			cout << modeGainsTimesModeShapes[i * mSize + m] << ", ";
		}
	}

	cout << endl;


	modeDampingTermsExp = new float[mfSize];
	damping = new float[mfSize];
	modeFrequenciesArr = new float[mfSize];

	cout << "modeDampingTermsString" << endl;
	for (int m = 0; m < mfSize; m++) {
		cout << modeDampingTermsString(m) << ", ";
		modeDampingTermsExp[m] = (float) exp(modeDampingTermsString(m) * tIncr);
	}

	cout << endl;

	/*
	for (int m = 0; m < mfSize; m++) {
		modeDampingTermsExp[m] = m;
	}*/


	for (int m = 0; m < mfSize; m++) {
		damping[m] = 1;
	}


	cout << "modeFrequenciesArr" << endl;
	for (int m = 0; m < mfSize; m++) {
		modeFrequenciesArr[m] = modeFrequenciesString(m) * 2 * M_PI;
		cout << modeFrequenciesArr[m] << ", ";
	}
	cout << endl;

	/*
	bufferReadIndex = 0;
	bufferWriteIndex = 0;
	auto now = std::chrono::high_resolution_clock::now();
	std::thread t1(audioStringSimCos);
	t1.detach();
	float subt = 0;
	int subWriteIndex = 0;

	while (true) {
		auto elapsed = std::chrono::high_resolution_clock::now() - now;
		if ((elapsed/ std::chrono::milliseconds(1)) > 1000) {
			now = std::chrono::high_resolution_clock::now();
			int idx = bufferWriteIndex;
			cout << idx - subWriteIndex << endl;
			subWriteIndex = idx;
		}
	}
	*/

	while (true) {

	}
	return 0;
}
